{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c7ba1e54",
   "metadata": {},
   "source": [
    "# Q1) Write a program to find the lowest number out of two numbers excepted from user."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "018aecb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter first number: 12\n",
      "Enter second number: 10\n",
      "Lowest Number = 10\n",
      "Do you want to compare numbers again? (yes/no): no\n",
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "while True:\n",
    "    f_num = float(input('Enter first number: '))\n",
    "    s_num = float(input('Enter second number: '))\n",
    "    if f_num < s_num:\n",
    "        small = f_num\n",
    "    else:\n",
    "        small = s_num\n",
    "    print('Lowest Number = %d' % (small))\n",
    "    option = input(\"Do you want to compare numbers again? (yes/no): \").lower()\n",
    "    if option != 'yes':\n",
    "        print(\"Exiting the program.\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe5e62a",
   "metadata": {},
   "source": [
    "# Q2) Write a program to whether a number (accepted from user) is divisible by 2 and 3 both."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3f861f05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number (or enter 0 to exit): 12\n",
      "The given number 12 is divisible by both 2 and 3.\n",
      "Enter a number (or enter 0 to exit): 10\n",
      "The given number 10 is not divisible by both 2 and 3.\n",
      "Enter a number (or enter 0 to exit): 0\n",
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "while True:\n",
    "    num = int(input(\"Enter a number (or enter 0 to exit): \"))\n",
    "    if num == 0:\n",
    "        print(\"Exiting the program.\")\n",
    "        break\n",
    "    if num % 2 == 0 and num % 3 == 0:\n",
    "        print(f\"The given number {num} is divisible by both 2 and 3.\")\n",
    "    else:\n",
    "        print(f\"The given number {num} is not divisible by both 2 and 3.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "079f39ed",
   "metadata": {},
   "source": [
    "# Q3) Accept the age of 4 people and display the oldest one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "33374939",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter age of person 1: 10\n",
      "Enter age of person 2: 12\n",
      "Enter age of person 3: 16\n",
      "Enter age of person 4: 14\n",
      "The oldest person is person 3 with age 16 years.\n",
      "Do you want to enter ages again? (yes/no): no\n",
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "def find_oldest_person(ages):\n",
    "    oldest_age = max(ages)\n",
    "    oldest_person_index = ages.index(oldest_age)\n",
    "    return oldest_age, oldest_person_index + 1\n",
    "while True:\n",
    "    ages = []\n",
    "    for i in range(4):\n",
    "        age = int(input(f\"Enter age of person {i + 1}: \"))\n",
    "        ages.append(age)\n",
    "    oldest_age, oldest_person_index = find_oldest_person(ages)\n",
    "    print(f\"The oldest person is person {oldest_person_index} with age {oldest_age} years.\")\n",
    "    option = input(\"Do you want to enter ages again? (yes/no): \").lower()\n",
    "    if option != 'yes':\n",
    "        print(\"Exiting the program.\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9873db2",
   "metadata": {},
   "source": [
    "# Q4) Write a program to check whether a number  is prime or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bd21a1c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number to check if it's prime (enter 0 to exit): 12\n",
      "12 is not a prime number.\n",
      "Enter a number to check if it's prime (enter 0 to exit): 7\n",
      "7 is a prime number.\n",
      "Enter a number to check if it's prime (enter 0 to exit): 0\n",
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "def is_prime(num):\n",
    "    if num <= 1:\n",
    "        return False\n",
    "    elif num == 2:\n",
    "        return True\n",
    "    elif num % 2 == 0:\n",
    "        return False\n",
    "    else:\n",
    "        for i in range(3, int(num**0.5) + 1, 2):\n",
    "            if num % i == 0:\n",
    "                return False\n",
    "        return True\n",
    "while True:\n",
    "    user_input = int(input(\"Enter a number to check if it's prime (enter 0 to exit): \"))\n",
    "    if user_input == 0:\n",
    "        print(\"Exiting the program.\")\n",
    "        break\n",
    "    if is_prime(user_input):\n",
    "        print(f\"{user_input} is a prime number.\")\n",
    "    else:\n",
    "        print(f\"{user_input} is not a prime number.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b8c97f3",
   "metadata": {},
   "source": [
    "# Q5) Write a program to check a character is vowel or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "17177396",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a character to check if it's a vowel (enter '0' to exit): a\n",
      "a is a vowel.\n",
      "Enter a character to check if it's a vowel (enter '0' to exit): v\n",
      "v is not a vowel.\n",
      "Enter a character to check if it's a vowel (enter '0' to exit): i\n",
      "i is a vowel.\n",
      "Enter a character to check if it's a vowel (enter '0' to exit): 0\n",
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "def is_vowel(char):\n",
    "    vowels = \"aeiouAEIOU\"\n",
    "    return char in vowels\n",
    "while True:\n",
    "    user_input = input(\"Enter a character to check if it's a vowel (enter '0' to exit): \")\n",
    "    if user_input == '0':\n",
    "        print(\"Exiting the program.\")\n",
    "        break\n",
    "    if len(user_input) == 1 and user_input.isalpha():\n",
    "        if is_vowel(user_input):\n",
    "            print(f\"{user_input} is a vowel.\")\n",
    "        else:\n",
    "            print(f\"{user_input} is not a vowel.\")\n",
    "    else:\n",
    "        print(\"Please enter a valid single character.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca8f7082",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
